gbr = GradientBoostingRegressor(max_depth=4, n_estimators=150)
gbr.fit(input_X, y)
np.sqrt(-cross_val_score(gbr, input_X, y, cv=5, scoring="neg_mean_squared_error")).mean()

xgbr = XGBRegressor(max_depth=5, n_estimators=400)
xgbr.fit(input_X, y)
np.sqrt(-cross_val_score(xgbr, input_X, y, cv=5, scoring="neg_mean_squared_error")).mean()

lsr = Lasso(alpha=0.00047)
lsr.fit(input_X, y)
np.sqrt(-cross_val_score(lsr, input_X, y, cv=5, scoring="neg_mean_squared_error")).mean()

rr = Ridge(alpha=13)
rr.fit(input_X, y)
np.sqrt(-cross_val_score(rr, input_X, y, cv=5, scoring="neg_mean_squared_error")).mean()

train_predict = 0.1 * gbr.predict(input_X) + 0.3 * xgbr.predict(input_X) + 0.3 * lsr.predict(input_X) + 0.3 * rr.predict(input_X)


test_predict = 0.1 * gbr.predict(test_X) 
+ 0.3 * xgbr.predict(test_X) 
+ 0.3 * lsr.predict(test_X) 
+ 0.3 * rr.predict(test_X)

q1 = pd.DataFrame(test_predict).quantile(0.0042)
pre_df = pd.DataFrame(test_predict)
pre_df["SalePrice"] = test_predict
pre_df = pre_df[["SalePrice"]]
pre_df.loc[pre_df.SalePrice <= q1[0], "SalePrice"] = pre_df.loc[pre_df.SalePrice <= q1[0], "SalePrice"] *0.96

output = pd.DataFrame({'Id': test_data.Id,
                       'SalePrice': np.exp(test_predict)-1})

output.to_csv('submission2.csv', index=False)